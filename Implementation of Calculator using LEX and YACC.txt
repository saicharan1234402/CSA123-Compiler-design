%{
#include<stdio.h>
#include"y.tab.h"
int c;
extern int yylaval;
%}
%%
"";
[a-z]
{
c=yytext[0];
yylaval=c-'a';
return(LETTER);
}
[0-9]
{
c=yytext[0];
yylaval=c-'0';
return(DIGIT);
}
[a-z0-9/b]
{
c=yytext[0];
return(c);
}
USING YACC TOOL:

%{
#include<stdio.h>
int regs[26];
int base;
%}
%start list
%token DIGIT LETTER 
%left'|'
%left'&'
%left'+''-'
%left'*''/''%'
%left UMINUS
%%
list:
|list stat'\n'
|list error'\n'
{
yyerror();
};
stat:expr 
{ 
printf("%d\n",$1);
}
|
LETTER'='expr 
{
regs[$1]=$3;
};
expr:'('expr')'
{$$=$2;}
|expr'*'expr {$$=$1*$3;}
|expr'/'expr {$$=$1/$3;}
|expr'%'expr {$$=$1%$3;}
|expr'+'expr {$$=$1+$3;
}
|expr'-'expr 
{
$$=$1-$3;
}
|expr'&'expr {$$=$1&$3;}
|expr'|'expr {$$=$1|$3;}
|'-'expr%prec UMINUS{$$=-$2;}
|LETTER {$$=regs[$1];
}
|
number 
;
number:DIGIT
{
$$=$1; 
base=($1==0)?8:10;
}
|
numberDIGIT
{
$$=base*$1+$2;
}
%%
main()
{
return(yyparse());
}
yyerror(s)char*s;
{
fprintf(stderr,"%s\n",s);
}
yywrap()
{
return(1);
}
